{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jayas\\\\OneDrive\\\\Documents\\\\GitHub\\\\Mini_project\\\\event\\\\src\\\\Components\\\\EventsPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport EventCard from './EventCard';\nimport FilterBar from './FilterBar';\nimport '../Components/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [filter, setFilter] = useState({\n    location: '',\n    category: '',\n    keyword: '',\n    dateRange: ''\n  });\n  useEffect(() => {\n    axios.get('https://rapidapi.com/stefan.skliarov/api/Soundcloud') // Replace with your actual API endpoint\n    .then(response => setEvents(response.data)).catch(error => console.error('Error fetching events:', error));\n  }, []);\n  const filteredEvents = events.filter(event => (!filter.location || event.location === filter.location) && (!filter.category || event.category === filter.category) && (!filter.keyword || event.title.toLowerCase().includes(filter.keyword.toLowerCase())) && (!filter.dateRange || new Date(event.date) <= new Date(filter.dateRange)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upcoming Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterBar, {\n      filter: filter,\n      setFilter: setFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-list\",\n      children: filteredEvents.map(event => /*#__PURE__*/_jsxDEV(EventCard, {\n        event: event\n      }, event.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(EventsPage, \"oc/ugSXsU6dSRyM0Oby3fqOW520=\");\n_c = EventsPage;\nexport default EventsPage;\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","EventCard","FilterBar","jsxDEV","_jsxDEV","EventsPage","_s","events","setEvents","filter","setFilter","location","category","keyword","dateRange","get","then","response","data","catch","error","console","filteredEvents","event","title","toLowerCase","includes","Date","date","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","id","_c","$RefreshReg$"],"sources":["C:/Users/jayas/OneDrive/Documents/GitHub/Mini_project/event/src/Components/EventsPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport EventCard from './EventCard';\r\nimport FilterBar from './FilterBar';\r\nimport '../Components/'\r\n\r\nconst EventsPage = () => {\r\n  const [events, setEvents] = useState([]);\r\n  const [filter, setFilter] = useState({ location: '', category: '', keyword: '', dateRange: '' });\r\n\r\n  useEffect(() => {\r\n    axios.get('https://rapidapi.com/stefan.skliarov/api/Soundcloud') // Replace with your actual API endpoint\r\n      .then(response => setEvents(response.data))\r\n      .catch(error => console.error('Error fetching events:', error));\r\n  }, []);\r\n\r\n  const filteredEvents = events.filter(event =>\r\n    (!filter.location || event.location === filter.location) &&\r\n    (!filter.category || event.category === filter.category) &&\r\n    (!filter.keyword || event.title.toLowerCase().includes(filter.keyword.toLowerCase())) &&\r\n    (!filter.dateRange || new Date(event.date) <= new Date(filter.dateRange))\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h1>Upcoming Events</h1>\r\n      <FilterBar filter={filter} setFilter={setFilter} />\r\n      <div className=\"event-list\">\r\n        {filteredEvents.map(event => (\r\n          <EventCard key={event.id} event={event} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventsPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAO,gBAAgB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC;IAAEa,QAAQ,EAAE,EAAE;IAAEC,QAAQ,EAAE,EAAE;IAAEC,OAAO,EAAE,EAAE;IAAEC,SAAS,EAAE;EAAG,CAAC,CAAC;EAEhGf,SAAS,CAAC,MAAM;IACdC,KAAK,CAACe,GAAG,CAAC,qDAAqD,CAAC,CAAC;IAAA,CAC9DC,IAAI,CAACC,QAAQ,IAAIT,SAAS,CAACS,QAAQ,CAACC,IAAI,CAAC,CAAC,CAC1CC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC;EACnE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,cAAc,GAAGf,MAAM,CAACE,MAAM,CAACc,KAAK,IACxC,CAAC,CAACd,MAAM,CAACE,QAAQ,IAAIY,KAAK,CAACZ,QAAQ,KAAKF,MAAM,CAACE,QAAQ,MACtD,CAACF,MAAM,CAACG,QAAQ,IAAIW,KAAK,CAACX,QAAQ,KAAKH,MAAM,CAACG,QAAQ,CAAC,KACvD,CAACH,MAAM,CAACI,OAAO,IAAIU,KAAK,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACjB,MAAM,CAACI,OAAO,CAACY,WAAW,CAAC,CAAC,CAAC,CAAC,KACpF,CAAChB,MAAM,CAACK,SAAS,IAAI,IAAIa,IAAI,CAACJ,KAAK,CAACK,IAAI,CAAC,IAAI,IAAID,IAAI,CAAClB,MAAM,CAACK,SAAS,CAAC,CAC1E,CAAC;EAED,oBACEV,OAAA;IAAAyB,QAAA,gBACEzB,OAAA;MAAAyB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB7B,OAAA,CAACF,SAAS;MAACO,MAAM,EAAEA,MAAO;MAACC,SAAS,EAAEA;IAAU;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnD7B,OAAA;MAAK8B,SAAS,EAAC,YAAY;MAAAL,QAAA,EACxBP,cAAc,CAACa,GAAG,CAACZ,KAAK,iBACvBnB,OAAA,CAACH,SAAS;QAAgBsB,KAAK,EAAEA;MAAM,GAAvBA,KAAK,CAACa,EAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA5BID,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AA8BhB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}